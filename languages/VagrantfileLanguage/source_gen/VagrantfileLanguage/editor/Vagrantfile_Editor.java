package VagrantfileLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import javax.swing.JButton;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.module.ModelAccess;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import VagrantfileLanguage.behavior.Vagrantfile__BehaviorDescriptor;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class Vagrantfile_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_391a0f_a(editorContext, node);
  }
  private EditorCell createCollection_391a0f_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_391a0f_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_391a0f_a0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_391a0f_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_391a0f_c0(editorContext, node));
    editorCell.addEditorCell(this.createJComponent_391a0f_d0(editorContext, node));
    editorCell.addEditorCell(this.createJComponent_391a0f_e0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_391a0f_f0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_391a0f_g0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_391a0f_h0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_391a0f_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "vagrantfile");
    editorCell.setCellId("Constant_391a0f_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_391a0f_b0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_name");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_391a0f_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "{");
    editorCell.setCellId("Constant_391a0f_c0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.MATCHING_LABEL, 0, "body-brace");
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createJComponent_391a0f_d0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, Vagrantfile_Editor._QueryFunction_JComponent_391a0f_a3a(node, editorContext), "_391a0f_d0");
    editorCell.setCellId("JComponent_391a0f_d0");
    return editorCell;
  }
  private static JComponent _QueryFunction_JComponent_391a0f_a3a(final SNode node, final EditorContext editorContext) {
    final JButton button = new JButton("Generate");

    Project project = editorContext.getOperationContext().getProject();
    SRepository repository = project.getRepository();
    final ModelAccess modelAccess = repository.getModelAccess();

    button.setActionCommand("generate");


    button.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        try {
          modelAccess.executeCommand(new Runnable() {
            public void run() {
              Vagrantfile__BehaviorDescriptor.BO_generate_id1nat2wFO2Yz.invoke(node);
            }
          });
        } catch (Exception e) {
          System.out.println(e.toString());
        }
      }
    });

    return button;
  }
  private EditorCell createJComponent_391a0f_e0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, Vagrantfile_Editor._QueryFunction_JComponent_391a0f_a4a(node, editorContext), "_391a0f_e0");
    editorCell.setCellId("JComponent_391a0f_e0");
    return editorCell;
  }
  private static JComponent _QueryFunction_JComponent_391a0f_a4a(final SNode node, final EditorContext editorContext) {
    final JButton button = new JButton("Up");

    Project project = editorContext.getOperationContext().getProject();
    SRepository repository = project.getRepository();
    final ModelAccess modelAccess = repository.getModelAccess();

    button.setActionCommand("up");


    button.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        try {
          modelAccess.executeCommand(new Runnable() {
            public void run() {
              Vagrantfile__BehaviorDescriptor.BO_up_id1nat2wFOtVF.invoke(node);
            }
          });
        } catch (Exception e) {
          System.out.println(e.toString());
        }
      }
    });

    return button;
  }
  private EditorCell createConstant_391a0f_f0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_391a0f_f0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_391a0f_g0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_391a0f_g0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, 0, true);
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_391a0f_a6a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_391a0f_b6a(editorContext, node));
    editorCell.addEditorCell(this.createRefNodeList_391a0f_c6a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_391a0f_a6a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "machines");
    editorCell.setCellId("Constant_391a0f_a6a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_391a0f_b6a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ":");
    editorCell.setCellId("Constant_391a0f_b6a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNodeList_391a0f_c6a(EditorContext editorContext, SNode node) {
    AbstractCellListHandler handler = new Vagrantfile_Editor.MachinesListHandler_391a0f_c6a(node, "Machines", editorContext);
    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Indent(), false);
    editorCell.setCellId("refNodeList_Machines");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, 0, true);
    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, 0, true);
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setRole(handler.getElementRole());
    return editorCell;
  }
  private static class MachinesListHandler_391a0f_c6a extends RefNodeListHandler {
    public MachinesListHandler_391a0f_c6a(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }
    public SNode createNodeToInsert(EditorContext editorContext) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, editorContext, super.getElementRole());
    }
    public EditorCell createNodeCell(EditorContext editorContext, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(editorContext, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, editorContext);
      return elementCell;
    }
    public EditorCell createEmptyCell(EditorContext editorContext) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(editorContext);
      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);
      return emptyCell;
    }
    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext editorContext) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        if (elementNode != null) {
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), editorContext));
        }
      }
    }
  }
  private EditorCell createConstant_391a0f_h0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "}");
    editorCell.setCellId("Constant_391a0f_h0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.MATCHING_LABEL, 0, "body-brace");
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
}
